syntax = "proto3";

package proxyservice;
option go_package = "pb/proxyservice";

import "google/protobuf/timestamp.proto";

enum Mode {
    PROGRESSIVE = 0;
    FOCUS = 1;
}


message Preset {
    reserved 1;

    // Behavior mode of the preset.
    // TODO: switch to oneof
    Mode mode = 2;

    //
    // "Focus mode" (Default-slow) parameters:
    //

    // Base speed in "Focus mode"
    double baseRxSpeedTarget = 3;
    // Break speed. Use Infinity to indicate no speed capping.
    double temporaryRxSpeedTarget = 4;
    // When a break should end.
    // TODO: move to a State message
    google.protobuf.Timestamp temporaryRxSpeedExpiry = 5;


    //
    // "Progressive mode" (Default-fast) parameters
    //

    // How fast healing should happen.
    double usageHealRate = 6; // HP per second
    // How long a user should be able to scroll.
    double usageMaxHP = 7;
    // A maximum speed to govern scrolling traffic.
    double usageBaseRxSpeedTarget = 8;

    // ID of the preset
    string id = 10;

    TrafficRules traffic_rules = 11;
}

// Rules for slowing down
message TrafficRules {
    bool match_all_traffic = 1;
    // repeated string app_ids = 1;
}


message Overlay {
    Preset preset = 1;
    google.protobuf.Timestamp expiry = 2;
}

message Settings {
    reserved 1, 2, 3, 5, 6, 8, 9;

    // A version used for migrations of this message.
    // Latest version: 2
    int32 version = 4;

    bool debug = 7;

    // TODO: move to a State message
    // When pause should be lifted.
    google.protobuf.Timestamp pauseExpiry = 10;

    // Parameters of the active preset.
    Preset defaultPreset = 11;

    // Overlay preset
    Overlay overlay = 12;

    //
    // NOT used by the backend:
    //

    reserved 13;

    Preset parachute_preset = 14;
}

message Request {
    oneof message {
        Settings setSettings = 1;
        GetStateRequest getState = 2;
        HealRequest heal = 3;
    }
}

message SetSettingsResponse {
}

message GetStateRequest {
}

message GetStateResponse {
    double usagePoints = 1;
}

message HealRequest {
}

message HealResponse {
    double usagePoints = 1;
}

/** Debugging */

message ServerState {
    repeated AppState apps = 1;
    double usagePoints = 2;
    double ratio = 3;
    double progressiveRxSpeedTarget = 4;
}

message AppState {
    double txPoints = 1;
    string name = 2;
    double rxPoints = 3;
    double txPointsMax = 4;
}

message Sample {
    string ip = 1;
    int64 rxBytes = 2;
    google.protobuf.Timestamp startTime = 3;
    int64 duration = 4; // how long the sample
    double rxSpeed = 5;
    double rxSpeedTarget = 6;
    string appMatch = 7;
    string slowReason = 8;
    repeated string dnsMatchers = 9;
}
