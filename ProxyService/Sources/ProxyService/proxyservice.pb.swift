// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proxyservice.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Proxyservice_Mode: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case progressive // = 0
  case focus // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .progressive
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .progressive
    case 1: self = .focus
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .progressive: return 0
    case .focus: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proxyservice_Mode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proxyservice_Mode] = [
    .progressive,
    .focus,
  ]
}

#endif  // swift(>=4.2)

public struct Proxyservice_Preset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Behavior mode of the preset.
  /// TODO: switch to oneof
  public var mode: Proxyservice_Mode = .progressive

  /// Base speed in "Focus mode"
  public var baseRxSpeedTarget: Double = 0

  /// Break speed. Use Infinity to indicate no speed capping.
  public var temporaryRxSpeedTarget: Double = 0

  /// When a break should end.
  /// TODO: move to a State message
  public var temporaryRxSpeedExpiry: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _temporaryRxSpeedExpiry ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_temporaryRxSpeedExpiry = newValue}
  }
  /// Returns true if `temporaryRxSpeedExpiry` has been explicitly set.
  public var hasTemporaryRxSpeedExpiry: Bool {return self._temporaryRxSpeedExpiry != nil}
  /// Clears the value of `temporaryRxSpeedExpiry`. Subsequent reads from it will return its default value.
  public mutating func clearTemporaryRxSpeedExpiry() {self._temporaryRxSpeedExpiry = nil}

  /// How fast healing should happen.
  public var usageHealRate: Double = 0

  /// How long a user should be able to scroll.
  public var usageMaxHp: Double = 0

  /// A maximum speed to govern scrolling traffic.
  public var usageBaseRxSpeedTarget: Double = 0

  /// ID of the preset
  public var id: String = String()

  public var trafficRules: Proxyservice_TrafficRules {
    get {return _trafficRules ?? Proxyservice_TrafficRules()}
    set {_trafficRules = newValue}
  }
  /// Returns true if `trafficRules` has been explicitly set.
  public var hasTrafficRules: Bool {return self._trafficRules != nil}
  /// Clears the value of `trafficRules`. Subsequent reads from it will return its default value.
  public mutating func clearTrafficRules() {self._trafficRules = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _temporaryRxSpeedExpiry: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _trafficRules: Proxyservice_TrafficRules? = nil
}

/// Rules for slowing down
public struct Proxyservice_TrafficRules {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// repeated string app_ids = 1;
  public var matchAllTraffic: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proxyservice_Overlay {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var preset: Proxyservice_Preset {
    get {return _preset ?? Proxyservice_Preset()}
    set {_preset = newValue}
  }
  /// Returns true if `preset` has been explicitly set.
  public var hasPreset: Bool {return self._preset != nil}
  /// Clears the value of `preset`. Subsequent reads from it will return its default value.
  public mutating func clearPreset() {self._preset = nil}

  public var expiry: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _expiry ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_expiry = newValue}
  }
  /// Returns true if `expiry` has been explicitly set.
  public var hasExpiry: Bool {return self._expiry != nil}
  /// Clears the value of `expiry`. Subsequent reads from it will return its default value.
  public mutating func clearExpiry() {self._expiry = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _preset: Proxyservice_Preset? = nil
  fileprivate var _expiry: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

public struct Proxyservice_Settings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// A version used for migrations of this message.
  /// Latest version: 2
  public var version: Int32 {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  public var debug: Bool {
    get {return _storage._debug}
    set {_uniqueStorage()._debug = newValue}
  }

  /// Parameters of the active preset.
  public var defaultPreset: Proxyservice_Preset {
    get {return _storage._defaultPreset ?? Proxyservice_Preset()}
    set {_uniqueStorage()._defaultPreset = newValue}
  }
  /// Returns true if `defaultPreset` has been explicitly set.
  public var hasDefaultPreset: Bool {return _storage._defaultPreset != nil}
  /// Clears the value of `defaultPreset`. Subsequent reads from it will return its default value.
  public mutating func clearDefaultPreset() {_uniqueStorage()._defaultPreset = nil}

  /// Overlay preset
  public var overlay: Proxyservice_Overlay {
    get {return _storage._overlay ?? Proxyservice_Overlay()}
    set {_uniqueStorage()._overlay = newValue}
  }
  /// Returns true if `overlay` has been explicitly set.
  public var hasOverlay: Bool {return _storage._overlay != nil}
  /// Clears the value of `overlay`. Subsequent reads from it will return its default value.
  public mutating func clearOverlay() {_uniqueStorage()._overlay = nil}

  public var parachutePreset: Proxyservice_Preset {
    get {return _storage._parachutePreset ?? Proxyservice_Preset()}
    set {_uniqueStorage()._parachutePreset = newValue}
  }
  /// Returns true if `parachutePreset` has been explicitly set.
  public var hasParachutePreset: Bool {return _storage._parachutePreset != nil}
  /// Clears the value of `parachutePreset`. Subsequent reads from it will return its default value.
  public mutating func clearParachutePreset() {_uniqueStorage()._parachutePreset = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proxyservice_Request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var message: Proxyservice_Request.OneOf_Message? = nil

  public var setSettings: Proxyservice_Settings {
    get {
      if case .setSettings(let v)? = message {return v}
      return Proxyservice_Settings()
    }
    set {message = .setSettings(newValue)}
  }

  public var getState: Proxyservice_GetStateRequest {
    get {
      if case .getState(let v)? = message {return v}
      return Proxyservice_GetStateRequest()
    }
    set {message = .getState(newValue)}
  }

  public var heal: Proxyservice_HealRequest {
    get {
      if case .heal(let v)? = message {return v}
      return Proxyservice_HealRequest()
    }
    set {message = .heal(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Message: Equatable {
    case setSettings(Proxyservice_Settings)
    case getState(Proxyservice_GetStateRequest)
    case heal(Proxyservice_HealRequest)

  #if !swift(>=4.1)
    public static func ==(lhs: Proxyservice_Request.OneOf_Message, rhs: Proxyservice_Request.OneOf_Message) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.setSettings, .setSettings): return {
        guard case .setSettings(let l) = lhs, case .setSettings(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.getState, .getState): return {
        guard case .getState(let l) = lhs, case .getState(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.heal, .heal): return {
        guard case .heal(let l) = lhs, case .heal(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

public struct Proxyservice_SetSettingsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proxyservice_GetStateRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proxyservice_GetStateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var usagePoints: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proxyservice_HealRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proxyservice_HealResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var usagePoints: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proxyservice_ServerState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var apps: [Proxyservice_AppState] = []

  public var usagePoints: Double = 0

  public var ratio: Double = 0

  public var progressiveRxSpeedTarget: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proxyservice_AppState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var txPoints: Double = 0

  public var name: String = String()

  public var rxPoints: Double = 0

  public var txPointsMax: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proxyservice_Sample {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ip: String = String()

  public var rxBytes: Int64 = 0

  public var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  public var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  public mutating func clearStartTime() {self._startTime = nil}

  /// how long the sample
  public var duration: Int64 = 0

  public var rxSpeed: Double = 0

  public var rxSpeedTarget: Double = 0

  public var appMatch: String = String()

  public var slowReason: String = String()

  public var dnsMatchers: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Proxyservice_Mode: @unchecked Sendable {}
extension Proxyservice_Preset: @unchecked Sendable {}
extension Proxyservice_TrafficRules: @unchecked Sendable {}
extension Proxyservice_Overlay: @unchecked Sendable {}
extension Proxyservice_Settings: @unchecked Sendable {}
extension Proxyservice_Request: @unchecked Sendable {}
extension Proxyservice_Request.OneOf_Message: @unchecked Sendable {}
extension Proxyservice_SetSettingsResponse: @unchecked Sendable {}
extension Proxyservice_GetStateRequest: @unchecked Sendable {}
extension Proxyservice_GetStateResponse: @unchecked Sendable {}
extension Proxyservice_HealRequest: @unchecked Sendable {}
extension Proxyservice_HealResponse: @unchecked Sendable {}
extension Proxyservice_ServerState: @unchecked Sendable {}
extension Proxyservice_AppState: @unchecked Sendable {}
extension Proxyservice_Sample: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proxyservice"

extension Proxyservice_Mode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PROGRESSIVE"),
    1: .same(proto: "FOCUS"),
  ]
}

extension Proxyservice_Preset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Preset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "mode"),
    3: .same(proto: "baseRxSpeedTarget"),
    4: .same(proto: "temporaryRxSpeedTarget"),
    5: .same(proto: "temporaryRxSpeedExpiry"),
    6: .same(proto: "usageHealRate"),
    7: .same(proto: "usageMaxHP"),
    8: .same(proto: "usageBaseRxSpeedTarget"),
    10: .same(proto: "id"),
    11: .standard(proto: "traffic_rules"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 2: try { try decoder.decodeSingularEnumField(value: &self.mode) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.baseRxSpeedTarget) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.temporaryRxSpeedTarget) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._temporaryRxSpeedExpiry) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.usageHealRate) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self.usageMaxHp) }()
      case 8: try { try decoder.decodeSingularDoubleField(value: &self.usageBaseRxSpeedTarget) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.id) }()
      case 11: try { try decoder.decodeSingularMessageField(value: &self._trafficRules) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.mode != .progressive {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 2)
    }
    if self.baseRxSpeedTarget != 0 {
      try visitor.visitSingularDoubleField(value: self.baseRxSpeedTarget, fieldNumber: 3)
    }
    if self.temporaryRxSpeedTarget != 0 {
      try visitor.visitSingularDoubleField(value: self.temporaryRxSpeedTarget, fieldNumber: 4)
    }
    try { if let v = self._temporaryRxSpeedExpiry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.usageHealRate != 0 {
      try visitor.visitSingularDoubleField(value: self.usageHealRate, fieldNumber: 6)
    }
    if self.usageMaxHp != 0 {
      try visitor.visitSingularDoubleField(value: self.usageMaxHp, fieldNumber: 7)
    }
    if self.usageBaseRxSpeedTarget != 0 {
      try visitor.visitSingularDoubleField(value: self.usageBaseRxSpeedTarget, fieldNumber: 8)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 10)
    }
    try { if let v = self._trafficRules {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proxyservice_Preset, rhs: Proxyservice_Preset) -> Bool {
    if lhs.mode != rhs.mode {return false}
    if lhs.baseRxSpeedTarget != rhs.baseRxSpeedTarget {return false}
    if lhs.temporaryRxSpeedTarget != rhs.temporaryRxSpeedTarget {return false}
    if lhs._temporaryRxSpeedExpiry != rhs._temporaryRxSpeedExpiry {return false}
    if lhs.usageHealRate != rhs.usageHealRate {return false}
    if lhs.usageMaxHp != rhs.usageMaxHp {return false}
    if lhs.usageBaseRxSpeedTarget != rhs.usageBaseRxSpeedTarget {return false}
    if lhs.id != rhs.id {return false}
    if lhs._trafficRules != rhs._trafficRules {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proxyservice_TrafficRules: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TrafficRules"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "match_all_traffic"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.matchAllTraffic) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.matchAllTraffic != false {
      try visitor.visitSingularBoolField(value: self.matchAllTraffic, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proxyservice_TrafficRules, rhs: Proxyservice_TrafficRules) -> Bool {
    if lhs.matchAllTraffic != rhs.matchAllTraffic {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proxyservice_Overlay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Overlay"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "preset"),
    2: .same(proto: "expiry"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._preset) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._expiry) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._preset {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._expiry {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proxyservice_Overlay, rhs: Proxyservice_Overlay) -> Bool {
    if lhs._preset != rhs._preset {return false}
    if lhs._expiry != rhs._expiry {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proxyservice_Settings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Settings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    4: .same(proto: "version"),
    7: .same(proto: "debug"),
    11: .same(proto: "defaultPreset"),
    12: .same(proto: "overlay"),
    14: .standard(proto: "parachute_preset"),
  ]

  fileprivate class _StorageClass {
    var _version: Int32 = 0
    var _debug: Bool = false
    var _defaultPreset: Proxyservice_Preset? = nil
    var _overlay: Proxyservice_Overlay? = nil
    var _parachutePreset: Proxyservice_Preset? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _version = source._version
      _debug = source._debug
      _defaultPreset = source._defaultPreset
      _overlay = source._overlay
      _parachutePreset = source._parachutePreset
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 4: try { try decoder.decodeSingularInt32Field(value: &_storage._version) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._debug) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._defaultPreset) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._overlay) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._parachutePreset) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._version != 0 {
        try visitor.visitSingularInt32Field(value: _storage._version, fieldNumber: 4)
      }
      if _storage._debug != false {
        try visitor.visitSingularBoolField(value: _storage._debug, fieldNumber: 7)
      }
      try { if let v = _storage._defaultPreset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._overlay {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._parachutePreset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proxyservice_Settings, rhs: Proxyservice_Settings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._version != rhs_storage._version {return false}
        if _storage._debug != rhs_storage._debug {return false}
        if _storage._defaultPreset != rhs_storage._defaultPreset {return false}
        if _storage._overlay != rhs_storage._overlay {return false}
        if _storage._parachutePreset != rhs_storage._parachutePreset {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proxyservice_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "setSettings"),
    2: .same(proto: "getState"),
    3: .same(proto: "heal"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: Proxyservice_Settings?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .setSettings(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .setSettings(v)
        }
      }()
      case 2: try {
        var v: Proxyservice_GetStateRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .getState(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .getState(v)
        }
      }()
      case 3: try {
        var v: Proxyservice_HealRequest?
        var hadOneofValue = false
        if let current = self.message {
          hadOneofValue = true
          if case .heal(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.message = .heal(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    switch self.message {
    case .setSettings?: try {
      guard case .setSettings(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }()
    case .getState?: try {
      guard case .getState(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .heal?: try {
      guard case .heal(let v)? = self.message else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proxyservice_Request, rhs: Proxyservice_Request) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proxyservice_SetSettingsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SetSettingsResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proxyservice_SetSettingsResponse, rhs: Proxyservice_SetSettingsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proxyservice_GetStateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStateRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proxyservice_GetStateRequest, rhs: Proxyservice_GetStateRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proxyservice_GetStateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetStateResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "usagePoints"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.usagePoints) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.usagePoints != 0 {
      try visitor.visitSingularDoubleField(value: self.usagePoints, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proxyservice_GetStateResponse, rhs: Proxyservice_GetStateResponse) -> Bool {
    if lhs.usagePoints != rhs.usagePoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proxyservice_HealRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HealRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proxyservice_HealRequest, rhs: Proxyservice_HealRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proxyservice_HealResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HealResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "usagePoints"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.usagePoints) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.usagePoints != 0 {
      try visitor.visitSingularDoubleField(value: self.usagePoints, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proxyservice_HealResponse, rhs: Proxyservice_HealResponse) -> Bool {
    if lhs.usagePoints != rhs.usagePoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proxyservice_ServerState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ServerState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "apps"),
    2: .same(proto: "usagePoints"),
    3: .same(proto: "ratio"),
    4: .same(proto: "progressiveRxSpeedTarget"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.apps) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self.usagePoints) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.ratio) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.progressiveRxSpeedTarget) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.apps.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.apps, fieldNumber: 1)
    }
    if self.usagePoints != 0 {
      try visitor.visitSingularDoubleField(value: self.usagePoints, fieldNumber: 2)
    }
    if self.ratio != 0 {
      try visitor.visitSingularDoubleField(value: self.ratio, fieldNumber: 3)
    }
    if self.progressiveRxSpeedTarget != 0 {
      try visitor.visitSingularDoubleField(value: self.progressiveRxSpeedTarget, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proxyservice_ServerState, rhs: Proxyservice_ServerState) -> Bool {
    if lhs.apps != rhs.apps {return false}
    if lhs.usagePoints != rhs.usagePoints {return false}
    if lhs.ratio != rhs.ratio {return false}
    if lhs.progressiveRxSpeedTarget != rhs.progressiveRxSpeedTarget {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proxyservice_AppState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AppState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "txPoints"),
    2: .same(proto: "name"),
    3: .same(proto: "rxPoints"),
    4: .same(proto: "txPointsMax"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self.txPoints) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.rxPoints) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self.txPointsMax) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.txPoints != 0 {
      try visitor.visitSingularDoubleField(value: self.txPoints, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if self.rxPoints != 0 {
      try visitor.visitSingularDoubleField(value: self.rxPoints, fieldNumber: 3)
    }
    if self.txPointsMax != 0 {
      try visitor.visitSingularDoubleField(value: self.txPointsMax, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proxyservice_AppState, rhs: Proxyservice_AppState) -> Bool {
    if lhs.txPoints != rhs.txPoints {return false}
    if lhs.name != rhs.name {return false}
    if lhs.rxPoints != rhs.rxPoints {return false}
    if lhs.txPointsMax != rhs.txPointsMax {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proxyservice_Sample: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Sample"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ip"),
    2: .same(proto: "rxBytes"),
    3: .same(proto: "startTime"),
    4: .same(proto: "duration"),
    5: .same(proto: "rxSpeed"),
    6: .same(proto: "rxSpeedTarget"),
    7: .same(proto: "appMatch"),
    8: .same(proto: "slowReason"),
    9: .same(proto: "dnsMatchers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.ip) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.rxBytes) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.duration) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.rxSpeed) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.rxSpeedTarget) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.appMatch) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.slowReason) }()
      case 9: try { try decoder.decodeRepeatedStringField(value: &self.dnsMatchers) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.ip.isEmpty {
      try visitor.visitSingularStringField(value: self.ip, fieldNumber: 1)
    }
    if self.rxBytes != 0 {
      try visitor.visitSingularInt64Field(value: self.rxBytes, fieldNumber: 2)
    }
    try { if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if self.duration != 0 {
      try visitor.visitSingularInt64Field(value: self.duration, fieldNumber: 4)
    }
    if self.rxSpeed != 0 {
      try visitor.visitSingularDoubleField(value: self.rxSpeed, fieldNumber: 5)
    }
    if self.rxSpeedTarget != 0 {
      try visitor.visitSingularDoubleField(value: self.rxSpeedTarget, fieldNumber: 6)
    }
    if !self.appMatch.isEmpty {
      try visitor.visitSingularStringField(value: self.appMatch, fieldNumber: 7)
    }
    if !self.slowReason.isEmpty {
      try visitor.visitSingularStringField(value: self.slowReason, fieldNumber: 8)
    }
    if !self.dnsMatchers.isEmpty {
      try visitor.visitRepeatedStringField(value: self.dnsMatchers, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proxyservice_Sample, rhs: Proxyservice_Sample) -> Bool {
    if lhs.ip != rhs.ip {return false}
    if lhs.rxBytes != rhs.rxBytes {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs.duration != rhs.duration {return false}
    if lhs.rxSpeed != rhs.rxSpeed {return false}
    if lhs.rxSpeedTarget != rhs.rxSpeedTarget {return false}
    if lhs.appMatch != rhs.appMatch {return false}
    if lhs.slowReason != rhs.slowReason {return false}
    if lhs.dnsMatchers != rhs.dnsMatchers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
